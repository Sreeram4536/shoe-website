<%- include("../partials/user/header") %>

<style>
    .content-main {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: calc(100vh - 160px); /* Full viewport height minus header and footer spacing */
        margin-top: 50px;
        margin-bottom: 50px;
    }

    .panel-login {
        max-width: 500px; /* Ensure panel width is controlled */
        width: 100%;
    }

    .error-message {
        color: red; /* Improve visibility for error messages */
        margin-top: 5px; /* Add spacing for error message */
    }
</style>

<section class="content-main">
    <div class="panel panel-default panel-login">
        <div class="panel-heading text-center">
            <h4 class="panel-title">Email</h4>
        </div>
        <div class="panel-body">
            <form id="passwordChangeForm" method="post" action="/user/change-password">
                <div class="form-group">
                    <label for="email">Enter Your Current Email</label>
                    <input class="form-control" name="email" placeholder="Email" type="text" id="email">
                    <div class="error-message" id="email-error"></div>
                </div>
                <div class="form-group">
                    <button type="submit" class="btn btn-primary btn-block">Verify</button>
                </div>
            </form>
        </div>
    </div>
</section>

<script>
document.getElementById('passwordChangeForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    if (!validateLoginForm()) {
        return false;
    }

    try {
        const formData = new FormData(this);
        const response = await fetch(this.action, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(Object.fromEntries(formData))
        });

        const data = await response.json();

        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: 'Success',
                text: data.message,
                timer: 2000,
                showConfirmButton: false
            }).then(() => {
                window.location.href = data.redirectUrl;
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: data.message
            });
        }
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An unexpected error occurred. Please try again.'
        });
    }
});

function validateLoginForm() {
    const emailInput = document.getElementById('email');
    const emailValue = emailInput.value.trim();
    const emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/;

    if (emailValue === '') {
        Swal.fire({
            icon: 'error',
            title: 'Validation Error',
            text: 'Please enter your email.'
        });
        return false;
    } else if (!emailValue.match(emailPattern)) {
        Swal.fire({
            icon: 'error',
            title: 'Validation Error',
            text: 'Please enter a valid email address'
        });
        return false;
    }
    return true;
}
</script>

<%- include("../partials/user/footer") %>
