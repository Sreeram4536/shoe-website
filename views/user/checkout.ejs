<!-- </%- include("../partials/user/header") %> -->

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css">
	<!-- <style>
        body {
            background-color: #dfe1e3; /* Light grey background */
        }
        .form-check-label {
            font-size: 1rem;
        }
        .form-check-input {
            accent-color: #007bff; /* Bootstrap's primary blue for better visibility */
        }
        .table-bordered {
            background-color: #ffffff; /* Ensure table is on a white background for clarity */
        }

		.modal {
  
  display: none; /* Hidden by default */
  position: fixed;
  z-index: 1050; /* Higher than other elements */
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: hidden; /* Prevent scrolling */
  background-color: rgba(0, 0, 0, 0.5); /* Background overlay */
}

.modal-content {
  background-color: #fff;
  margin: 15% auto;
  padding: 20px;
  border: 1px solid #888;
  width: 30%;
}

.close {
  position: absolute;
  top: 10px;
  right: 10px;
  color: #aaa;
  font-size: 28px;
  font-weight: bold;
  cursor: pointer;
}

    </style>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script> -->
<!-- </head>
<body>
    <!-- <script type="application/x-javascript">
		addEventListener("load", function () {
			setTimeout(hideURLbar, 0);
		}, false);

		function hideURLbar() {
			window.scrollTo(0, 1);
		}
	</script>
	//custom-theme 
	<link href="/css/bootstrap.css" rel="stylesheet" type="text/css" media="all" />
	<link rel="stylesheet" href="/css/shop.css" type="text/css" media="screen" property="" />
	<link href="/css/style7.css" rel="stylesheet" type="text/css" media="all" />
	<!Owl-carousel-CSS --
	<link rel="stylesheet" type="text/css" href="/css/jquery-ui1.css">
	<link href="/css/style.css" rel="stylesheet" type="text/css" media="all" />
	<-- font-awesome-icons --
	<link href="/css/font-awesome.css" rel="stylesheet">
	<-- //font-awesome-icons --
	<link href="//fonts.googleapis.com/css?family=Montserrat:100i,200,200i,300,300i,400,400i,500,500i,600,600i,700,700i,800"
	    rel="stylesheet">
	<link href="//fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i,800" rel="stylesheet">

	<style>
	.price-button {
		padding: 12px 20px;
		background-color: #f1f1f1;
		color: #333;
		border: 1px solid #ddd;
		border-radius: 30px;
		cursor: pointer;
		transition: background-color 0.3s, transform 0.2s;
		text-align: center;
		font-size: 14px;
	  }
	 
	 
	  .price-button:hover {
		background-color: #007bff;
		color: white;
		transform: scale(1.05);
	  }
	 
	 
	  .price-button:active {
		transform: scale(0.95);
	  } --
	  /* .category-brand-container {
   text-align: center;
 } */
	  </style>
</head> 

<body>
	<!-- banner -->
<!-- <div class="banner_top innerpage" id="home">
		<div class="wrapper_top_w3layouts">
			<div class="header_agileits">
				<div class="logo inner_page_log">
					<h1><a class="navbar-brand" href="index.html"><span>Downy</span> <i>Shoes</i></a></h1>
				</div>
				<div class="overlay overlay-contentpush">
					<button type="button" class="overlay-close"><i class="fa fa-times" aria-hidden="true"></i></button>

					<nav>
						<ul>
							<li><a href="/" class="active">Home</a></li>
							<li><a href="about.html">About</a></li>
							<li><a href="/user/shop">Shop Now</a></li>
							<li><a href="contact.html">Contact</a></li>
							
							
								<% if ((session && session.user) || (session && session.google)) { %>
									<li><a href="/user/cart">Cart</a></li>
									<li><a href="user/userProfile">Profile</a></li>
									<li><a href="user/logout">Logout</a></li>
								<% } else { %>
									<li><a href="user/signup">Signup</a></li>
									<li><a href="user/login">Login</a></li>
								<% } %>
						</ul>
					</nav>
				</div>
				<div class="mobile-nav-button">
					<button id="trigger-overlay" type="button"><i class="fa fa-bars" aria-hidden="true"></i></button>
				</div> -->
				<!-- cart details -->
				<!-- <div class="top_nav_right">
					<div class="shoecart shoecart2 cart cart box_1">
						<form action="#" method="post" class="last">
							<input type="hidden" name="cmd" value="_cart">
							<input type="hidden" name="display" value="1">
							<button class="top_shoe_cart" type="submit" name="submit" value=""><i class="fa fa-cart-arrow-down" aria-hidden="true"></i></button>
						</form>
					</div>
				</div>
			</div>
		</div> -->
		<!-- //cart details -->
		<!-- search -->
		<!-- <div class="search_w3ls_agileinfo">
			<div class="cd-main-header">
				<ul class="cd-header-buttons">
					<li><a class="cd-search-trigger" href="#cd-search"> <span></span></a></li>
				</ul>
			</div>
			<div id="cd-search" class="cd-search">
				<form action="#" method="post">
					<input name="Search" type="search" placeholder="Click enter after typing...">
				</form>
			</div>
		</div> -->
		<!-- //search -->
		<!-- <div class="clearfix"></div> -->
		<!-- /banner_inner -->
		<!-- <div class="services-breadcrumb_w3ls_agileinfo">
			<div class="inner_breadcrumb_agileits_w3">

				<ul class="short">
					<li><a href="index.html">Home</a><i>|</i></li>
					<li>Shop</li>
				</ul>
			</div>
		</div> -->
		<!-- //banner_inner -->
	<!-- </div> -->
	<div class="container py-5">
		<div class="row justify-content-center">
			<div class="col-12 col-lg-10">
				<!-- Page Title -->
				<div class="mb-4">
					<h2 class="fw-bold">Checkout</h2>
					<nav aria-label="breadcrumb">
						<ol class="breadcrumb">
							<li class="breadcrumb-item"><a href="/user/cart">Cart</a></li>
							<li class="breadcrumb-item active">Checkout</li>
						</ol>
					</nav>
				</div>
	
				<!-- Cart Summary Card -->
				<div class="card shadow-sm mb-4">
					<div class="card-header bg-white">
						<h5 class="mb-0">Order Summary</h5>
					</div>
					<div class="card-body">
						<div class="table-responsive">
							<table class="table table-hover">
								<thead class="table-light">
									<tr>
										<th>Product</th>
										<th>Details</th>
										<th class="text-end">Total</th>
									</tr>
								</thead>
								<tbody>
									<% cartItems.forEach(item => { %>
									<tr>
										<td style="width: 100px;">
											<img src="/uploads/product-images/<%= item.productId.productImage[0] %>" 
												 alt="<%= item.productId.productName %>"
												 class="img-fluid rounded">
										</td>
										<td>
											<h6 class="mb-0"><%= item.productId.productName %></h6>
											<small class="text-muted">
												Quantity: <%= item.quantity %> × ₹<%= item.productId.salePrice %>
											</small>
										</td>
										<td class="text-end">₹<%= item.totalPrice %></td>
									</tr>
									<% }) %>
									
									<!-- Subtotal Row -->
									<tr>
										<td colspan="2" class="text-end">Subtotal:</td>
										<td class="text-end">₹<span id="subtotal"><%= totalAmount %></span></td>
									</tr>
									
									<!-- Discount Row (Initially Hidden) -->
									<tr id="discountRow" style="display: none;">
										<td colspan="2" class="text-end">
											<div class="applied-coupon-wrapper d-flex justify-content-between align-items-center">
												<div class="d-flex align-items-center">
													<i class="fas fa-tag text-success me-2"></i>
													<span class="text-muted">Applied Coupon:</span>
													<strong id="appliedCouponCode" class="coupon-code ms-2"></strong>
												</div>
												<button class="btn btn-outline-danger btn-sm remove-btn" onclick="removeCoupon()">
													<i class="fas fa-times me-1"></i>Remove
												</button>
											</div>
										</td>
										<td class="text-end text-success fw-bold">
											-₹<span id="discountAmount">0</span>
										</td>
									</tr>
									
									<!-- Grand Total Row -->
									<tr class="fw-bold">
										<td colspan="2" class="text-end">Grand Total:</td>
										<td class="text-end"><span id="grandTotal"><%= totalAmount %></span></td>
									</tr>
								</tbody>
							</table>
						</div>
					</div>
				</div>
	
				<!-- Coupon Section -->
				<div class="card shadow-sm mb-4">
					<div class="card-header bg-white">
						<h5 class="mb-0">Apply Coupon</h5>
					</div>
					<div class="card-body">
						<div class="row align-items-center">
							<div class="col-md-6">
								<div class="input-group">
									<input type="text" id="couponCode" class="form-control" placeholder="Enter coupon code">
									<button class="btn btn-primary" type="button" onclick="applyCoupon()">Apply</button>
								</div>
								<small id="couponMessage" class="text-muted"></small>
							</div>
						</div>
					</div>
				</div>
	
				<!-- Address Selection Card -->
				<div class="card shadow-sm">
					<div class="card-header bg-white d-flex justify-content-between align-items-center">
						<h5 class="mb-0">Shipping Address</h5>
						<a href="/user/userProfile" class="btn btn-outline-primary btn-sm">
							<i class="fa fa-edit"></i> Edit Addresses
						</a>
					</div>
					<div class="card-body">
						<button class="btn btn-primary mb-3" data-bs-toggle="modal" data-bs-target="#addAddressModal">Add New Address</button>
                <div id="addressList">
						<% if (addresses.length > 0) { %>
							<form action="/user/payment" method="POST">
								<div class="row g-3">
									<% addresses.forEach((addr, index) => { %>
									<div class="col-12 col-md-6">
										<div class="card h-100">
											<div class="card-body">
												<div class="form-check">
													<input class="form-check-input" type="radio" 
														   name="chosenAddress" id="address<%= index %>" 
														   value="<%= addr._id %>" required>
													<label class="form-check-label w-100" for="address<%= index %>">
														<strong><%= addr.name %></strong>
														<span class="badge bg-secondary ms-2"><%= addr.addressType %></span>
														<p class="mb-1 mt-2">
															<%= addr.city %>, <%= addr.state %>, <%= addr.pincode %>
														</p>
														<p class="mb-1 mt-2"></p>
															<%= addr.landMark %>
														</p>
														<small class="text-muted">
															📞 <%= addr.phone %> / <%= addr.altPhone %>
														</small>
													</label>
												</div>
												<button
												type="button"
												class="btn btn-outline-secondary btn-sm mt-3 edit-address-btn"
												onclick="populateEditForm('<%= addr._id %>', '<%= addr.addressType %>', '<%= addr.name %>', '<%= addr.city %>', '<%= addr.state %>', '<%= addr.pincode %>','<%= addr.landMark%>', '<%= addr.phone %>', '<%= addr.altPhone %>')">
												<i class="fa fa-edit"></i> Edit
											</button>
											

											</div>
										</div>
									</div>
									<% }) %>
								</div>
								<div class="mt-4">
									<button type="submit" class="btn btn-primary btn-lg w-100">
										Proceed to Payment
									</button>
								</div>
							</form>
						<% } else { %>
							<div class="text-center py-4">
								<p class="mb-3">No addresses available.</p>
								<a href="/user/userProfile" class="btn btn-primary">
									Add New Address
								</a>
							</div>
						<% } %>
					</div>
				</div>
			</div>
		</div>
	</div>

	<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
		<div class="modal-dialog" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="exampleModalLabel">Modal Title</h5>
					<button type="button" class="close" data-dismiss="modal" aria-label="Close">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body">
					This is the content of the modal.
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
					<button type="button" class="btn btn-primary">Save changes</button>
				</div>
			</div>
		</div>
	</div>

	<div class="modal fade" id="addAddressModal" tabindex="-1" role="dialog" aria-labelledby="addAddressModalLabel" aria-hidden="true">
		<div class="modal-dialog" role="document">
			<form id="addAddressForm" class="modal-content" method="POST" action="/user/editAddress">
				<input type="hidden" id="addressId" name="addressId">
				<div class="modal-header">
					<h5 class="modal-title" id="addAddressModalLabel">Add/Edit Address</h5>
					<button type="button" class="close" data-dismiss="modal" aria-label="Close" onclick="closeModal()">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body">
					<!-- Address Fields -->
					<div class="mb-3">
						<label for="addressType" class="form-label">Address Type</label>
						<input type="text" class="form-control" id="addressType" name="addressType" required>
					</div>
					<div class="mb-3">
						<label for="name" class="form-label">Full Name</label>
						<input type="text" class="form-control" id="name" name="name" required>
					</div>
					<div class="mb-3">
						<label for="city" class="form-label">City</label>
						<input type="text" class="form-control" id="city" name="city" required>
					</div>
					<div class="mb-3">
						<label for="state" class="form-label">State</label>
						<input type="text" class="form-control" id="state" name="state" required>
					</div>
					<div class="mb-3">
						<label for="pincode" class="form-label">Pincode</label>
						<input type="number" class="form-control" id="pincode" name="pincode" required>
					</div>
					<div class="mb-3">
						<label for="landMark" class="form-label">Landmark</label>
						<input type="text" class="form-control" id="landMark" name="landMark" required>
					</div>
					<div class="mb-3">
						<label for="phone" class="form-label">Phone</label>
						<input type="text" class="form-control" id="phone" name="phone" required>
					</div>
					<div class="mb-3">
						<label for="altPhone" class="form-label">Alternate Phone</label>
						<input type="text" class="form-control" id="altPhone" name="altPhone">
					</div>
				</div>
				<div class="modal-footer">
					<button type="submit" class="btn btn-primary">Save Address</button>
				</div>
			</form>
		</div>
	</div>

	<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script src="/js/bootstrap.bundle.min.js"></script>
    <script>

document.addEventListener("DOMContentLoaded", () => {
    // Populate edit form
    window.populateEditForm = (id, addressType, name, city, state, pincode,landMark, phone, altPhone) => {
        const form = document.getElementById("addAddressForm");
        form.action = `/user/editAddress/?=${id}`; // Update the action URL for editing

        // Prefill form fields
		document.getElementById("addressId").value = id;
        document.getElementById("addressType").value = addressType;
        document.getElementById("name").value = name;
        document.getElementById("city").value = city;
        document.getElementById("state").value = state;
        document.getElementById("pincode").value = pincode;
		document.getElementById("landMark").value = landMark;
        document.getElementById("phone").value = phone;
        document.getElementById("altPhone").value = altPhone;

		form.dataset.mode = 'edit';

        // Open the modal programmatically
        const addAddressModal = new bootstrap.Modal(document.getElementById("addAddressModal"));
        addAddressModal.show();
    };

    // Close the modal programmatically
    window.closeModal = () => {
        const addAddressModal = bootstrap.Modal.getInstance(document.getElementById("addAddressModal"));
        addAddressModal.hide();
    };

	


    // Add Address Form Submission
    // document.getElementById("addAddressForm").addEventListener("submit", async (event) => {
    //     event.preventDefault();
    //     const formData = new FormData(event.target);
        
    //     try {
    //         const response = await fetch(`/user/editAddress?=${addressId}`, {
    //             method: "POST",
    //             body: new URLSearchParams(formData),
    //         });
    //         const result = await response.json();

    //         if (result.success) {
				
    //             // Show success alert
    //             Swal.fire("Success", "Address saved successfully", "success").then(() => {
    //                 fetchAddresses(); // This should be called here
    //                 closeModal(); // Close the modal after fetching addresses
    //             });
				
    //         } else {
    //             Swal.fire("Error", result.message, "error"); // Show error alert
    //         }
			
    //     } catch (error) {
    //         Swal.fire("Error", "Failed to save address", "error"); // Show error alert
    //     }
    // });

	document.getElementById("addAddressForm").addEventListener("submit", async (event) => {
    event.preventDefault();
    const formData = new FormData(event.target);
    const mode = event.target.dataset.mode; // Get the mode (add or edit)

    try {
        let response;
        if (mode === 'edit') {
            // If in edit mode, send a PUT request to update the address
            response = await fetch(`/user/editAddress?id=${document.getElementById("addressId").value}`, {
                method: "POST",
                body: new URLSearchParams(formData),
            });
        } else {
            // If in add mode, send a POST request to add the address
            response = await fetch('/user/addAddress', {
                method: "POST",
                body: new URLSearchParams(formData),
            });
        }

        const result = await response.json();

        if (result.success) {
            // Show success alert
            Swal.fire("Success", mode === 'edit' ? "Address updated successfully" : "Address added successfully", "success").then(() => {
                fetchAddresses(); // Refresh the address list
                closeModal(); // Close the modal after adding/updating the address
            });
        } else {
            Swal.fire("Error", result.message, "error"); // Show error alert
        }
        
    } catch (error) {
        Swal.fire("Error", "Failed to save address", "error"); // Show error alert
    }
});

    // Function to update the address list in the UI
    function updateAddressList(updatedAddress) {
        const addressList = document.getElementById('addressList'); // Assuming you have an element with this ID
        const addressCard = addressList.querySelector(`[data-address-id="${updatedAddress._id}"]`); // Find the address card by ID

        if (addressCard) {
            // Update the address card with new values
            addressCard.querySelector('.addressType').textContent = updatedAddress.addressType;
            addressCard.querySelector('.name').textContent = updatedAddress.name;
            addressCard.querySelector('.city').textContent = updatedAddress.city;
            addressCard.querySelector('.state').textContent = updatedAddress.state;
            addressCard.querySelector('.pincode').textContent = updatedAddress.pincode;
            addressCard.querySelector('.phone').textContent = updatedAddress.phone;
            addressCard.querySelector('.altPhone').textContent = updatedAddress.altPhone;
        }
    }

});

// Fetch and populate address list
async function fetchAddresses() {
    try {
        const response = await fetch('/user/editAddress'); // Fetch addresses from the server
        const addresses = await response.json(); // Parse the JSON response

        const addressList = document.getElementById('addressList'); // Get the address list element
        addressList.innerHTML = addresses.map(addr => `
            <div class="card mb-2" data-address-id="${addr._id}"> <!-- Added data attribute for address ID -->
                <div class="card-body">
                    <h5>${addr.name} (${addr.addressType})</h5> <!-- Display name and address type -->
                    <p>${addr.city}, ${addr.state} - ${addr.pincode}</p> <!-- Display city, state, and pincode -->
                    <p>${addr.landMark ? addr.landMark : 'No landmark provided'}</p> <!-- Display landmark if available -->
                    <small class="text-muted">📞 ${addr.phone} / ${addr.altPhone ? addr.altPhone : 'N/A'}</small> <!-- Display phone numbers -->
                </div>
            </div>
        `).join(''); // Join the HTML strings and set as inner HTML
    } catch (error) {
        console.error('Error fetching addresses:', error); // Log the error to the console
        // Swal.fire('Error', 'Failed to fetch addresses: ' + error.message, 'error'); // Show error message to the user
		window.location.reload();
    }
}
        
        // Add Address Form Submission
        // document.getElementById('addAddressForm').addEventListener('submit', async (event) => {
        //     event.preventDefault();
        //     const formData = new FormData(event.target);

        //     try {
        //         const response = await fetch('/user/addAddress', {
        //             method: 'POST',
        //             body: new URLSearchParams(formData),
        //         });
        //         const result = await response.json();

        //         if (result.success) {
        //             Swal.fire('Success', 'Address added successfully', 'success');
        //             fetchAddresses(); // Refresh addresses
        //             closeModal(); // Close the modal after success
        //         } else {
        //             Swal.fire('Error', result.message, 'error');
        //         }
        //     } catch (error) {
        //         Swal.fire('Error', 'Failed to add address', 'error');
        //     }
        // });

        // Place Order Handler
        document.getElementById('placeOrder').addEventListener('click', async () => {
            const selectedPaymentMethod = document.querySelector('input[name="paymentMethod"]:checked').value;

            try {
                const response = await fetch('/user/placeOrder', {
                    method: 'POST',
                    body: JSON.stringify({ paymentMethod: selectedPaymentMethod }),
                    headers: {
                        'Content-Type': 'application/json',
                    },
                });
                const result = await response.json();

                if (result.success) {
                    Swal.fire('Success', 'Order placed successfully', 'success');
                } else {
                    Swal.fire('Error', result.message, 'error');
                }
            } catch (error) {
                Swal.fire('Error', 'Failed to place order', 'error');
            }
        });

        // Load initial data
        fetchAddresses();
    </script>

    

	<script>
	function applyCoupon() {
		console.log("Apply button clicked");
		const couponCode = document.getElementById('couponCode').value;
		const totalAmount = parseFloat(document.getElementById('grandTotal').textContent.replace('₹', ''));

		console.log("Coupon Code:", couponCode);
		console.log("Total Amount:", totalAmount);

		if (!couponCode.trim()) {
			Swal.fire({
				icon: 'warning',
				title: 'Empty Coupon',
				text: 'Please enter a coupon code',
			});
			return;
		}

		fetch('/user/apply-coupon', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json'
			},
			body: JSON.stringify({
				couponCode: couponCode,
				totalAmount: totalAmount
			})
		})
		.then(response => response.json())
		.then(data => {
			console.log("Response received:", data);
			
			if (data.success) {
				// Show discount row
				document.getElementById('discountRow').style.display = 'table-row';
				
				// Update discount amount and coupon code
				document.getElementById('discountAmount').textContent = data.discount;
				document.getElementById('appliedCouponCode').textContent = couponCode;
				
				// Update grand total
				document.getElementById('grandTotal').textContent = '₹' + data.finalAmount;

				Swal.fire({
					icon: 'success',
					title: 'Coupon Applied Successfully!',
					text: `Discount of ₹${data.discount} has been applied to your order.`,
					showConfirmButton: true
				});
			} else {
				// Hide discount row
				document.getElementById('discountRow').style.display = 'none';
				
				Swal.fire({
					icon: 'error',
					title: 'Coupon Error',
					text: data.message,
					showConfirmButton: true
				});
			}
		})
		.catch(error => {
			console.error('Error:', error);
			Swal.fire({
				icon: 'error',
				title: 'Error',
				text: 'An error occurred while applying the coupon. Please try again.',
				showConfirmButton: true
			});
		});
	}

	function removeCoupon() {
		const originalTotal = parseFloat(document.getElementById('subtotal').textContent.replace('₹', ''));
		const removeButton = document.querySelector('.remove-btn');
		
		// Add loading state
		removeButton.classList.add('loading');
		const originalButtonText = removeButton.innerHTML;
		removeButton.innerHTML = '';
		removeButton.disabled = true;

		fetch('/user/remove-coupon', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json'
			}
		})
		.then(response => response.json())
		.then(data => {
			if (data.success) {
				// Hide discount row
				document.getElementById('discountRow').style.display = 'none';
				
				// Reset grand total
				document.getElementById('grandTotal').textContent = '₹' + originalTotal;
				
				// Clear coupon input
				document.getElementById('couponCode').value = '';

				Swal.fire({
					icon: 'success',
					title: 'Coupon Removed',
					showConfirmButton: false,
					timer: 1500
				});
			} else {
				Swal.fire({
					icon: 'error',
					title: 'Error',
					text: 'Error removing coupon'
				});
			}
		})
		.catch(error => {
			console.error('Error:', error);
			Swal.fire({
				icon: 'error',
				title: 'Error',
				text: 'An error occurred'
			});
		})
		.finally(() => {
			// Reset button state
			removeButton.classList.remove('loading');
			removeButton.innerHTML = originalButtonText;
			removeButton.disabled = false;
		});
	}
	</script>

    <!-- </%- include("../partials/user/footer") %> -->
</body>
</html>
